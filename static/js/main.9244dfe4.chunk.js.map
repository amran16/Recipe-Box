{"version":3,"sources":["components/RecipeListItem.js","components/RecipeList.js","components/Navbar.js","components/RecipeAddForm.js","components/RecipeApp.js","registerServiceWorker.js","index.js"],"names":["RecipeListItem","this","props","title","img","instructions","id","onDelete","ingredients","map","ingredient","index","className","src","alt","type","onClick","Component","RecipeList","recipes","recipe","Navbar","onNewRecipe","RecipeAddForm","handleSubmit","e","preventDefault","state","onSave","onClose","onSubmit","htmlFor","size","name","placeholder","value","onChange","event","setState","target","rows","cols","RecipeApp","handleSave","newRecipeIngredients","split","newRecipe","nextRecipeId","showAddForm","filter","showEditForm","onEdit","handleEdit","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9244dfe4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../style/RecipeListItem.css';\n\n\nclass RecipeListItem extends Component{\n\n  render(){\n    //const {title} = this.props.title;  //this is the same as the line below, destructuring\n    const {title, img, instructions, id, onDelete} = this.props;\n    const ingredients = this.props.ingredients.map((ingredient, index) => (\n      <li key={index}>{ingredient}</li>\n    ));\n    return(\n      <div className='recipe-card'>\n      <div className='recipe-card-img'>\n       <img src={img} alt={title} />\n      </div>\n      <div className='recipe-card-content'>\n       <h2 className='recipe-title'> {title}</h2>\n       <h4>Ingredients: </h4>\n       <ul>\n        {ingredients}\n       </ul>\n       <h4>Instructions: </h4>\n       <p>{instructions}</p>\n        <button className='button' type='button' onClick={() => onDelete(id)}> Delete Recipe</button>\n       </div>\n      </div>\n    )\n  }\n}\n\nexport default RecipeListItem;\n","import React, {Component} from \"react\";\nimport RecipeListItem from './RecipeListItem';\nimport '../style/RecipeList.css';\n\nclass RecipeList extends Component{\n\n  render(){\n    const {onDelete} = this.props;\n    const recipes = this.props.recipes.map((recipe, index) => (\n       <RecipeListItem\n         key = {recipe.id}\n         id={recipe.id}\n         title={recipe.title}\n         img={recipe.img}\n         ingredients={recipe.ingredients}\n         instructions={recipe.instructions}\n         onDelete={onDelete}\n      />\n     ));\n\n     return(\n       <div className='recipe-list'>\n         {recipes}\n       </div>\n     )\n  }\n}\n\nexport default RecipeList;\n","import React from 'react';\nimport '../style/Navbar.css'\n\n\nconst Navbar = (props) => {\n  return(\n    <header>\n     <h3><a>Recipe App</a></h3>\n      <nav>\n       <li><a onClick={props.onNewRecipe}>Add New Recipe</a></li>\n      </nav>\n    </header>\n  )\n}\n\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport '../style/RecipeAddForm.css';\n\nclass RecipeAddForm extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      title: '',\n      instructions: '',\n      ingredients: '',\n      img: ''\n    };\n  }\n\n\n  handleSubmit = (e) => {\n\n    e.preventDefault();\n\n    const {title} = this.state;\n    const {instructions} = this.state;\n    const {ingredients} = this.state;\n    const {img} = this.state;\n\n    this.props.onSave({title, instructions, ingredients, img})\n\n  }\n\n  render(){\n    const {title, instructions, ingredients, img} = this.state;\n    const {onClose} = this.props;\n\n    return(\n    <div className='recipe-form-container'>\n     <form className='recipe-form' onSubmit={this.handleSubmit}>\n      <button\n           type='button'\n           className='close-button'\n           onClick={onClose}\n         >\n           X\n         </button>\n      <div className='recipe-form-line'>\n        <label htmlFor='title'>Title</label>\n          <input\n               id='title'\n               size={44}\n               name='title'\n               type='text'\n               placeholder='Title'\n               value={title}\n               onChange = {event => this.setState({title: event.target.value})}\n          />\n        </div>\n        <label htmlFor='ingredients'>Ingredients</label>\n        <textarea\n            rows='5'\n            cols='49'\n            name='ingredients'\n            id='ingredients'\n            type='text'\n            value={ingredients}\n            placeholder='Separate multiple ingredients by a comma'\n            onChange = {event => this.setState({ingredients: event.target.value})}\n        />\n          <label htmlFor='instructions'>Instructions</label>\n          <textarea\n              rows='8'\n              cols='49'\n              type='text'\n              name='instructions'\n              id='instructions'\n              value={instructions}\n              placeholder='Instructions'\n              onChange = {event => this.setState({instructions: event.target.value})}\n          />\n        <div className='recipe-form-line'>\n          <label htmlFor='img'>Image Url</label>\n           <input\n              id='img'\n              type='text'\n              size={39}\n              placeholder='Image'\n              name='img'\n              value={img}\n              onChange = {event => this.setState({img: event.target.value})}\n          />\n          </div>\n          <div className=''>\n            <button type='submit' className='buttons'> Save </button>\n          </div>\n       </form>\n       </div>\n    );\n  }\n\n}\n\nexport default RecipeAddForm;\n","import React, { Component } from 'react';\nimport RecipeList from './RecipeList';\nimport Navbar from './Navbar';\nimport RecipeAddForm from './RecipeAddForm';\n\n\nclass RecipeApp extends Component {\n  constructor(props){\n  super(props);\n  this.state = {\n    recipes: [\n      { id: 0,\n        title:'Garlic Lemon Salmon',\n        ingredients: ['Water', 'Lemon', 'Butter', 'Garlic'],\n        instructions:'Place salmon fillets over of butter and garlic. pour the lomon and bake it',\n        img: 'salmon.jpg'\n      },\n      {\n        id: 1,\n        title:'Breakfast Smoothie',\n        ingredients:['Milk','Blueberries', 'Strawberries', 'Banana', 'Coconut Oil'],\n        instructions: 'Combine all the Smoothie Ingredients. Blend until all ingredients are running smoothly through the machine. Add Ice & blend again on high.',\n        img: 'smoothie.jpg'\n       },\n      {\n        id: 2,\n        title:'Fry Rice Recipe',\n        ingredients:['Onion', 'Oil', 'Egg', 'Soy sauce', 'Peas', 'Rice', 'Green onions'],\n        instructions: 'Heat 1 tbsp oil in wok; add chopped onions. Mix egg and 3 drops of oil. Add selected meat, along with peas and cooked onion; Stir-fry. Add rice and green onions.',\n        img: 'rice.jpg'\n      }\n    ],\n    nextRecipeId: 3,\n    showAddForm: false,\n    showEditForm: false\n\n  };\n}\n\nhandleSave = (recipe) => {\n\n  const {title, ingredients, instructions, img} = recipe;\n\n  const newRecipeIngredients = ingredients.split(',');\n\n  const newRecipe = {\n                 id: this.state.nextRecipeId,\n                 title: title,\n                 ingredients: newRecipeIngredients,\n                 instructions: instructions,\n                 img:img\n               };\n\n        this.setState({\n          nextRecipeId: this.state.nextRecipeId + 1,\n          recipes: [...this.state.recipes, newRecipe],\n          showAddForm: false\n        });\n}\n\n\nonDelete = (id) => {\n  const recipes = this.state.recipes.filter(recipe => recipe.id !== id);\n  this.setState({recipes});\n}\n\nrender() {\n    return (\n      <div>\n        <Navbar onNewRecipe={() => this.setState({showAddForm: true})}/>\n\n        {this.state.showAddForm &&\n         <RecipeAddForm\n           onSave={this.handleSave}\n           onClose={() => this.setState({showAddForm: false})}\n         />\n        }\n\n        <RecipeList\n           onEdit={this.handleEdit}\n           onDelete={this.onDelete}\n           recipes={this.state.recipes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RecipeApp;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport RecipeApp from './components/RecipeApp';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<RecipeApp />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}